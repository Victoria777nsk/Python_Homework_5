'''
Задача 1. Создайте программу для игры с конфетами человек против человека. Условие задачи: На столе лежит 201 конфета. 
Играют два игрока, делая ход друг после друга. Первый ход определяется жеребьёвкой. 
За один ход можно забрать не более чем 28 конфет. Все конфеты оппонента достаются сделавшему последний ход.

Сколько конфет нужно взять первому игроку, чтобы забрать все конфеты у своего конкурента?:
'''
# Чтобы первый игрок выиграл, ему нужно первым ходом забрать остаток от целочисленного деления имеющегося количества конфет
# на количество, которое можно взять за 1 ход + 1. Далее первому игроку нужно придерживаться того же принципа, т.е.:
# 201 % (28 + 1) = 27 => первому игроку нужно взять 27 конфет во время первого хода. 
# Если вторым ходом второй игрок взял 10 конфет, то первый должен взять: (201 - 27 - 10) % (28 + 1) = 19, и т.д.

from random import getrandbits

player_1 = input('Введите имя первого игрока: ')
player_2 = input('Введите имя второго игрока: ')
candies = 201
max_candies = 28

first_move = bool(getrandbits(1))   # Определяем, кто из игроков будет ходить первым 
if first_move == 1:                 # (с помощью генерации случайного логического значения).
    print(f'Первый ход делает {player_1}!')
else:
    print(f'Первый ход делает {player_2}!')


def Enter_Candies_Quantity(name):        # Запрашиваем у игрока ввод количества конфет.
    x = int(input(f'{name}, какое количество конфет возьмете (от 1 до 28): '))
    while x < 1 or x > 28:
        x = int(input(f'Ошибка! {name}, введите количество от 1 до 28: '))
    return x

def Current_Situation(name, k, counter, candies):  # Выводим на экран текущую ситуацию (кто сколько взял, сколько у него стало, сколько осталось на столе).
    print(f"Ходил(-а) {name}, он(-а) взял(-а) {k}, теперь у него(неё) {counter} конфет(-ы). На столе осталось: {candies} конфет(-ы).")

count_player_1 = 0      # Счетчик количества конфет у игрока 1.
count_player_2 = 0      # Счетчик количества конфет у игрока 2.

while candies > 28:
    if first_move:
        k = Enter_Candies_Quantity(player_1)          # Игрок 1 вводит количество конфет.
        count_player_1 += k                           # Прибавляем взятые конфеты к счетчику игрока 1.
        candies -= k                                  # Отнимаем от общего количества конфет уже взятые.
        first_move = False                            # Переход хода к игроку 2.
        Current_Situation(player_1, k, count_player_1, candies)
    else:
        k = Enter_Candies_Quantity(player_2)          # Игрок 2 вводит количество конфет.
        count_player_2 += k                           # Прибавляем взятые конфеты к счетчику игрока 2.
        candies -= k                                  # Отнимаем от общего количества конфет уже взятые.
        first_move = True                             # Переход хода к игроку 1.
        Current_Situation(player_2, k, count_player_2, candies)

if first_move:                       # Определяем победителя, когда осталось <= 28 конфет.
    print(f'Ура! Побеждает {player_1}!')
else:
    print(f'Ура! Побеждает {player_2}!')